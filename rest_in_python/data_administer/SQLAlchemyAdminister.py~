from rest_administer.data_administer import DataAdminister

#class has methods to fetch from
class SQLAlchemyAdminister(DataAdminister):

    # param - model - the model for which the query is to be made
    # param - pk - long/int pk of the entry
    # return - model instance of the entry
    def get_entry(self, model, pk):
        return model.query.filter_by(id=pk).first()

    # param - model - the model for which the query is to be made
    # param - list_info - dict containing query attributes like limit, search, sort, etc
    # return - array of model instances
    def get_list(self, model, list_info):
        #TODO parse and use the list_info
        return model.query.all()

    # param - model - the model for which the query is to be made
    # param - input - model instance containing all the data to be inserted
    # return - updated model instance
    def add_entry(self, model, datum):
        self.db_conn.session.add(datum)
        self.db_conn.session.commit()
        return datum

    # param - model - the model for which the query is to be made
    # param - input - model instance containing all the data to be inserted
    # param - pk - long/int pk of the entry
    # return - updated model instance
    def edit_entry(self, model, pk, datum):
        #TODO set the pk of datum to the given pk
        self.db_conn.session.add(datum)
        self.db_conn.session.commit()
        return datum

    # param - model - the model for which the query is to be made
    # param - pk - long/int pk of the entry
    # return - boolean True if successful delete
    def delete_entry(self, model, pk):
        datum = self.get_entry(model=model, pk=pk)
        self.db_conn.session.delete(datum)
        self.db_conn.session.commit()
        return True

